on: [push]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@master
    
    - uses: pietrobolcato/install-azure-cli-action@v1
    # now run any step that would require the `az` command line utility, eg:
    
    - name: az login
      run: az login
        
    - name: Create ACR
      id: create-acr
      run: |
        az acr create -n votingappacr -g trial-rg --location "South Central US" --sku Standard --admin-enabled
        echo "::set-output name=acr_username::`az acr credential show -n deploymentcenter --query username | xargs`"
        echo "::set-output name=acr_password::`az acr credential show -n deploymentcenter --query passwords[0].value | xargs`"
        echo "::add-mask::`az acr credential show -n deploymentcenter --query passwords[0].value | xargs`"

    - uses: azure/docker-login@v1
      with:
        login-server: deploymentcenter.azurecr.io
        username: ${{ steps.create-acr.outputs.acr_username }}
        password: ${{ steps.create-acr.outputs.acr_password }}

    - name: Build Docker Compose application
      run: docker-compose build
        
    - name: List Docker Images
      run: docker images
      
    - name: Tag Docker images
      run: |
        docker tag brsa-pariiii_frontend:latest deploymentcenter.azurecr.io/brsa-pariiii_frontend:latest
        docker tag brsa-pariiii_backend:latest deploymentcenter.azurecr.io/brsa-pariiii_backend:latest
        docker tag brsa-pariiii_mymongodb:latest deploymentcenter.azurecr.io/brsa-pariiii_mymongodb:latest
          
    - name: Push Docker image 
      run: docker push deploymentcenter.azurecr.io/brsa-pariiii_frontend:latest
  
    - name: Push Docker image 
      run: docker push deploymentcenter.azurecr.io/brsa-pariiii_backend:latest

    - name: Push Docker image 
      run: docker push deploymentcenter.azurecr.io/brsa-pariiii_mymongodb:latest
    
    - uses: azure/k8s-set-context@v1
      id: login
      with:
         kubeconfig: ${{ secrets.aks_deploymentcentertest1_kubeConfig }}
    
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep voting-ns | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace voting-ns`
        fi    
    - uses: azure/k8s-deploy@v1.2
      with:
        namespace: voting-ns
        manifests: backend.yaml
          
        # images: |
        #   deploymentcenter.azurecr.io/deploymentcentertest:${{ github.sha }}
        #imagepullsecrets: |
          #brsasecret   
