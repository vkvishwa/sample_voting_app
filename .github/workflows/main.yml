on: [push]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
     CLUSTER_NAME: voting-app-aks-cluster
     CLUSTER_RESOURCE_GROUP: trial-rg
      
    steps:
    
    - uses: actions/checkout@master
    
    - uses: pietrobolcato/install-azure-cli-action@v1
    # now run any step that would require the `az` command line utility, eg:
    
    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
      
    - name: Create ACR
      id: create-acr
      run: |
        az acr create -n samplevotingappacr -g trial-rg --location "South Central US" --sku Standard --admin-enabled
        
    - uses: azure/docker-login@v1
      with:
        login-server: brsaregistry456.azurecr.io
        username: ${{ secrets.KRSH_USERNAME }}
        password: ${{ secrets.KRSH_PASSWORD }}

    - name: Build and push image to ACR
      id: build-image
      run: |
        docker build "$GITHUB_WORKSPACE/azure-vote" -f  "azure-vote/Dockerfile" -t votingappacrr.azurecr.io/deploymentcentertest:latest --label dockerfile-path=azure-vote/Dockerfile
        docker push votingappacrr.azurecr.io/deploymentcentertest:latest
        
    - name: List Docker Images
      run: docker images
      
    - name: Tag Docker images
      run: docker tag votingappacrr.azurecr.io/deploymentcentertest:latest votingappacrr.azurecr.io/votingappacrr.azurecr.io/deploymentcentertest:latest
        
    - name: Push Docker image 
      run: docker push votingappacrr.azurecr.io/deploymentcentertest:latest
    
    - uses: azure/k8s-set-context@v1
      id: login
      with:
         kubeconfig: ${{ secrets.aks_deploymentcentertest1_kubeConfig }}
    
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep voting-ns | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace voting-ns`
        fi    
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep brsanamespace | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace brsanamespc`
        fi
        
    - uses: azure/aks-set-context@v3
      name: Get K8s context
      with:
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        
    - name: Set up Kubernetes environment
      uses: Azure/setup-kubectl@v1
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        
    - name: Deploy to AKS
      run: kubectl apply -f ./backend.yaml
